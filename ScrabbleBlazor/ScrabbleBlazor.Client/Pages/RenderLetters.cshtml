@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using ScrabbleBlazor.Shared.Model;

@using ScrabbleBlazor.Client.Services;
@inject LocalStorage Storage

@inject GameState GameState

@if (Player != null)
{
    foreach (var item in Player.OwnLetters)
    {
        <button type="button" style="visibility: @(item.IsSelected ? "hidden" : "visible"); @(!Player.Identifier.Equals(Game.CurrentPlayer) ? "opacity: 0.65;cursor: not-allowed;" : "")" onclick=@(() => OnSelectLetter(item))>
            <span style="font-size:20px;">@item.Value</span>
            <span style="font-size:10px;">@item.Score</span>
        </button>
    }
}

<button type="button" onclick=@(() => OnSubmitWord())>Submit</button>

@functions {

    [Parameter] Player Player { get; set; }


    [Parameter] Game Game { get; set; }

    void OnSelectLetter(Letter letter)
    {
        letter.IsSelected = !letter.IsSelected;


        Storage["LetterSelected"] = letter.Value.ToString();
    }


    protected async Task OnSubmitWord()
    {

        var word = string.Empty;
        foreach(var c in Player.OwnLetters)
        {
            if(c.IsSelected)
            {
                word += c.Value;
            }
        }
        await GameState.SubmitWord(Player.Identifier, word);

        Player = await GameState.RegisterUser(Player.Identifier);


    }

}