@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using ScrabbleBlazor.Client.Services;
@using ScrabbleBlazor.Shared.Model;
@using ScrabbleBlazor.Shared
@inject LocalStorage Storage
@inject GameState GameState
@inject HttpClient Http
@page "/"

<h1>Hello, @CurrentUser!</h1>

<input bind=CurrentUser />
<button title="Init player" onclick=@(() => OnPlayerInit())>Update Name</button>

<h2>
    @RegisteredSuccessfully
</h2>

<table>
    <tr>
        <td>
            <ScrabbleTableLayout Title="Scrabble Game" TableModel=table CurrentPlayer=currentGamePlayer />
        </td>
        <td valign="top">
            <PlayersList Players=allPlayers  />
        </td>
     </tr>
    <tr>
        <td colspan="2" >
            <RenderLetters Player="player"></RenderLetters>
        </td>
    </tr>
</table>

<button title="Get state" onclick=@(() => RefreshState())>Refresh</button>
<button title="End turn" onclick=@(() => SendState())>End Turn</button>

@functions {
    string CurrentUser;
    string RegisteredSuccessfully;
    Player player;
    Player currentGamePlayer;
    List<Player> allPlayers;

    Game game;

    List<Table> table = null;
    protected override void OnInit()
    {
        if (Storage["SUserId"] == null)
        {
            Storage["SUserId"] = "New player" + DateTime.Now.ToShortTimeString();
        }
        CurrentUser = Storage["SUserId"];
    }

    protected async Task OnPlayerInit()
    {

        Storage["SUserId"] = CurrentUser;

        player = await GameState.RegisterUser(CurrentUser);
        RegisteredSuccessfully = player == null ? "There are already four players registered to this game!" : "You have been successfully registered! ";

        List<Game> games = await Http.GetJsonAsync<List<Game>>("api/CurrentState/Get");
        game = games[0];
        Console.WriteLine("Current user:" + CurrentUser);
        currentGamePlayer = game.Players.Where(p => p.Identifier == CurrentUser).FirstOrDefault();
        Console.WriteLine("Current game player:" + currentGamePlayer);
    }

    protected override async Task OnInitAsync()
    {
        List<Game> games = await Http.GetJsonAsync<List<Game>>("api/CurrentState/Get");
        game = games[0];
        allPlayers = game.Players;
        table = new List<Table>() { game.Table };
        Console.WriteLine(allPlayers.Count.ToString() + "***");
        this.StateHasChanged();
        base.StateHasChanged();
    }

    protected async Task RefreshState() {


        await Http.PostJsonAsync<List<Game>>("/api/CurrentState/Get", game);


        List<Game> games = await Http.GetJsonAsync<List<Game>>("api/CurrentState/Get");
        game = games[0];
        allPlayers = game.Players;
        table = new List<Table>() { game.Table };

        Storage["SUserId"] = CurrentUser;

        player = await GameState.RegisterUser(CurrentUser);

        Console.WriteLine(game.Players.Count.ToString() + "***");
    }

    protected async Task SendState()
    {

        game.LettersBag = null;
        game.Players[0].OwnLetters = null;
        //game.Table.Squares[0][0].Letter = 'A';
        await Http.PostJsonAsync("api/CurrentState/Post", new List<Game> { game});
        await RefreshState();
    }
}